package project0;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

/**
 * Constructs a path from start to end using a depth first search strategy
 * 
 * @author Mike Della Donna
 *
 */
public class DepthFirstSearch implements SearchStrategy {

	LinkedList<Cell> stack;
	ArrayList<Cell> greylist;
	ArrayList<Cell> blacklist;
	HashMap<Cell, Cell> parentMap;
	Logger log;
	
	public DepthFirstSearch()
	{
		stack = new LinkedList<Cell>();
		greylist = new ArrayList<Cell>();
		blacklist = new ArrayList<Cell>();
		parentMap = new HashMap<Cell, Cell>();

		log = new Logger();
	}
	
	@Override
	public List<Cell> search(Point start, Point end, Land land)
	{
		// add current cell to the greylist
		log.visitCell();
		log.log("Adding "+land.getCell(start)+" to the list of in progress cells");
		greylist.add(land.getCell(start));
		
		// check to see if you have reached the destination
		log.log("Checking to see if this is the destination");
		if(start.equals(end)){
			// if you have, return the grey list, that's your path
			log.log("Destination reached, returning the path so far, representing by the list of in progress cells(greylist)");
			return greylist;}
		
		// if you haven't, check to see if you can move to an adjacent cell
		log.log("Haven't reached the destination, checking the adjacent cells");
		boolean locationAvailable = false;
		List<Cell> temp = land.getAdjacentCells(start);
		for(Cell c : temp)
		{
			log.log("Checking "+c);
			//if c is unoccupied and has not been explored yet (not on the greylist or blacklist)
			if(!c.occupied && !greylist.contains(c) && !blacklist.contains(c))
			{
				log.log(c +" is a new cell, pushing it to the stack");
				locationAvailable = true;
				stack.addFirst(c);
			}
		}
		
		
		// can you move to an adjacent cell?
		log.log("Checking if there were any adjacent cells");
		if(locationAvailable)
		{
			// the new valid locations are at the top of the stack
			// recursive call on the top of the stack
			log.log("There was at least one adjacent cell, I'll check "+ stack.peek() +" next");
			return search(stack.remove().getLocation(), end, land);
		}
		else
		{
			// move current square from the greylist to the blacklist
			log.log("There wasn't anywhere new to go, removing "+land.getCell(start) +" from the greylist and adding it to the blacklist, it's a dead end");
			greylist.remove(land.getCell(start));
			blacklist.add(land.getCell(start));
			
			log.log("Checking to see if there are any locations on the stack");
			// are there locations on the stack?
			if(stack.size() > 0)
			{
				// recursive call on the top of the stack
				log.log("There are new locations on the stack, checking "+stack.peek());
				return search(stack.remove().getLocation(), end, land);
			}
			else
			{
				log.log("There aren't any more choices, couldn't find the destination");
				// return destination not found
				return null;
			}
			
		}
	}
	
	@Override
	public List<Cell> search(Point start, Point end, Land land)
	{
		log.visitCell();
		log.log("Adding "+land.getCell(start)+" to the list of in progress cells");
		stack.add(land.getCell(start));
		greylist.add(land.getCell(start));
		return search2(start, end, land);
	}
	
	private List<Cell> search2(Point start, Point end, Land land)
	{
		Cell current;
		while(stack.size() > 0)
		{
			log.log("Grabbing the next cell from the queue");
			current = stack.pop();
			log.visitCell();
			// check to see if you have reached the destination
			log.log("Checking to see if this is the destination");
			if(current.location.equals(end))
			{
				log.log("Destination reached, putting together the path");
				// if you have, use the parent map to get back to the original start
				//create a list to hold the path
				log.log("Creating a list to hold the path");
				LinkedList<Cell> path = new LinkedList<Cell>();
				//get the cell at the end
				log.log("Adding cells in reverse order, starting with the destination");
				//push it onto the stack you're going to return
				path.addFirst(current);
				//get it's parent
				current = parentMap.get(current);
				//while it has a parent, keep pushing them onto the stack
				log.log("Adding each parent in turn until we get to the start, which has no parent");
				while(current != null)
				{
					path.addFirst(current);
					current = parentMap.get(current);
				}
				//return the stack as a list in the correct order
				log.log("Returning the path");
				return path;
			}
			
			// if you haven't, check to see if you can move to an adjacent cell
			log.log("Haven't reached the destination");
			
			log.log("Checking adjacent cells");
			List<Cell> temp = land.getAdjacentCells(current.location);
			
			for(Cell c : temp)
			{
				log.log("Checking "+c);
				//if c is unoccupied and has not been explored yet (not on the greylist or blacklist)
				if(!c.occupied && !greylist.contains(c) && !blacklist.contains(c))
				{
					// explore this location later
					stack.addFirst(c);
					// mark this location as being in progress
					greylist.add(c);
					// add start as its parent
					parentMap.put(c, current);
					log.log(c +" is a new cell, markingit and adding to the end of the queue");
					log.log("It's parent will be the current cell, added to the parent map");
					
				}
			}
		}

		log.log("There aren't any more cells, couldn't find the destination");
		// return destination not found
		return null;

	@Override
	public Logger getLogger() {
		return log;
	}

}
