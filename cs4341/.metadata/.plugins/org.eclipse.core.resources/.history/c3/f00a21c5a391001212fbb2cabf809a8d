package ri;

import javax.script.ScriptEngine;

import ri.rule.predicate.Javascript;
import ri.rule.predicate.Predicate;

public class RuleInterpreter 
{
	private ScriptEngine engine;
	
	public Predicate createPredicate(String pred)
	{
		//in this case, there are no more operands
		//return a javascript predicate
		if(pred.charAt(0) != '(')
		{
			return new Javascript(pred, engine);
		}
		
		char[] p = pred.toCharArray();
		int paren = 0;
		int index = -1;
		for(int i = 0; i < p.length; i++)
		{
			switch(p[i])
			{
			case '(': paren++; break;
			case ')': paren--; break;
			case 'A': 
				if(paren == 1 && p[i+1] == 'N' && p[i+2] == 'D'){
					index = i;}
				break;
			case 'O': 
				if(paren == 1 && p[i+1] == 'R'){
					index = i;}
				break;
			case 'N': 
				if(paren == 1 && p[i+1] == 'O' && p[i+2] == 'T'){
					index = i;}
				break;
			}
		}
		
		return null; 
	}
}
