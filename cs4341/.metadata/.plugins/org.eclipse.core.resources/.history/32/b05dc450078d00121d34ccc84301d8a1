package project0;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;

/**
 * Constructs a path from start to end using a depth first search strategy
 * 
 * @author Mike Della Donna
 *
 */
public class UniformCostSearch implements SearchStrategy {

	PriorityQueue<CellNode> stack;
	ArrayList<CellNode> greylist;
	ArrayList<Cell> blacklist;
	HashMap<CellNode,CellNode> parentMap;
	Logger log;
	
	public UniformCostSearch()
	{
		stack = new PriorityQueue<CellNode>();
		greylist = new ArrayList<CellNode>();
		blacklist = new ArrayList<Cell>();
		parentMap = new HashMap<CellNode, CellNode>();
		log = new Logger();
	}
	
	@Override
	public List<Cell> search(Point start, Point end, Land land)
	{
		
		return null;
	}

	@Override
	public Logger getLogger() {
		return log;
	}
	
	private double computeCost(Cell start, Cell end)
	{
		double gas = 1;
		
		if(start.elevation < end.elevation)
		{
			gas *= Math.abs(start.elevation - end.elevation);
		}
		else if(start.elevation > end.elevation)
		{
			gas /= Math.abs(end.elevation - start.elevation);
		}
		
		return end.cost + gas;
	}

}

class CellNode implements Comparable<CellNode>
{
	public CellNode(Cell cell, double cost) 
	{
		this.cell = cell;
		this.cost = cost;
	}

	Cell cell;
	double cost;
	
	@Override
	public int compareTo(CellNode o) {
		
		double test = this.cost - o.cost;
		
		int compare = 0;
		
		if (test > 0.0)
			compare = 1;
		
		if(test < 0.0)
			compare = -1;
		
		return compare;
	}
	
	@Override
	public boolean equals(Object obj) {
		return cell.equals(obj);
	}
	
	@Override
	public int hashCode() {
		return cell.hashCode();
	}
}
